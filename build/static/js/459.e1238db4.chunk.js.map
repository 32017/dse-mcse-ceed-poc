{"version":3,"file":"static/js/459.e1238db4.chunk.js","mappings":"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","sources":["views/quoteToCash/AppendItemData.js"],"sourcesContent":["import React from 'react'\nimport {\n  CInputGroup,\n  CFormInput,\n  CRow,\n  CCol,\n  CButton,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CContainer,\n} from '@coreui/react'\nimport * as XLSX from 'xlsx'\nconst AppendItemData = () => {\n  const defaultExcelData = { header: [], body: [] }\n  const [excelData, setExcelData] = React.useState(defaultExcelData)\n  // meta: { updatedUser: email, fileName: ..., }\n  const uploadPayload = { data: [], meta: {} }\n  const uploadRef = React.useRef()\n  const uploadData = () => {\n    for (let i = 0; i < excelData.body.length; i++) {\n      let data = excelData.body[i]\n      let [\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      ] = data\n      uploadPayload.data.push({\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      })\n    }\n    console.log(uploadPayload)\n    if (uploadPayload.data.length > 0) {\n      //call api\n    }\n  }\n  const removeFile = () => {\n    uploadRef.current.value = null\n    setExcelData(defaultExcelData)\n  }\n  const handleChange = (e) => {\n    const files = e.target.files\n    console.log(files)\n    handleFile(files[0])\n  }\n  const handleFile = (file) => {\n    if (!file) {\n      console.error('file is empty')\n      return\n    }\n    /* set up FileReader */\n    const reader = new FileReader()\n    const rABS = !!reader.readAsBinaryString\n    reader.onload = (e) => {\n      try {\n        /* Parse data */\n        const bstr = e.target.result\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0]\n        const ws = wb.Sheets[wsname]\n        console.log(rABS, wb)\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 })\n        /* Update state */\n        console.log(data)\n        /* set to state */\n        convertState(data)\n        console.log(excelData)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    if (rABS) reader.readAsBinaryString(file)\n    else reader.readAsArrayBuffer(file)\n  }\n  const convertState = (data) => {\n    if (Array.isArray(data)) {\n      const header = data[0]\n      const body = data.splice(1)\n      setExcelData({ header, body })\n    }\n  }\n  const renderCell = (item) => {\n    return (\n      <>\n        {item.map((cell, cellIndex) => {\n          return <CTableDataCell key={`${cell}_${cellIndex}`}>{cell ? cell : ''}</CTableDataCell>\n        })}\n      </>\n    )\n  }\n  return (\n    <div className=\"px-3\">\n      <CContainer>\n        <CRow>\n          <CCol md={4}>\n            <CInputGroup className=\"mb-3\">\n              <CFormInput\n                type=\"file\"\n                accept=\".xlsx\"\n                id=\"inputFile\"\n                onChange={handleChange}\n                ref={uploadRef}\n              />\n              <CButton type=\"button\" color=\"secondary\" variant=\"outline\">\n                開始上傳\n              </CButton>\n              <CButton type=\"button\" color=\"secondary\" variant=\"outline\" onClick={removeFile}>\n                移除\n              </CButton>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n        <div>\n          <CRow className=\"form-box px-2 overflow-scroll\">\n            <CTable hover className=\"table-bg-none\">\n              <CTableHead>\n                <CTableRow>\n                  {excelData.header.map((item, index) => {\n                    return (\n                      <CTableHeaderCell scope=\"col\" key={`${item}_${index}`}>\n                        {item}\n                      </CTableHeaderCell>\n                    )\n                  })}\n                </CTableRow>\n              </CTableHead>\n              <CTableBody>\n                {excelData.body.map((item, index) => {\n                  return <CTableRow key={`body_${index}`}>{renderCell(item)}</CTableRow>\n                })}\n              </CTableBody>\n            </CTable>\n          </CRow>\n        </div>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default AppendItemData\n"],"names":["defaultExcelData","header","body","_React$useState","React","_React$useState2","_slicedToArray","excelData","setExcelData","uploadRef","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","console","log","data","sheet_to_json","convertState","error","readAsArrayBuffer","Array","isArray","splice","renderCell","item","_jsx","_Fragment","children","map","cell","cellIndex","CTableDataCell","concat","className","_jsxs","CContainer","CRow","CCol","md","CInputGroup","CFormInput","accept","id","onChange","files","ref","CButton","color","variant","onClick","current","value","CTable","hover","CTableHead","CTableRow","index","CTableHeaderCell","scope","CTableBody"],"sourceRoot":""}