{"version":3,"file":"static/js/314.aeedb9a9.chunk.js","mappings":"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","sources":["utils/setting.js","views/pricebook/ImportItemData.js"],"sourcesContent":["const CAGETORY_OPTIONS = [\n  {\n    id: 'additional_product',\n    displayName: 'Additional Product',\n  },\n  {\n    id: 'enterprise',\n    displayName: 'Enterprise',\n  },\n  {\n    id: 'faculty',\n    displayName: 'Faculty',\n  },\n  {\n    id: 'mvlp',\n    displayName: 'MVLP',\n  },\n  {\n    id: 'server_and_cloud_enrollment',\n    displayName: 'Server and Cloud Enrollment',\n  },\n  {\n    id: 'student',\n    displayName: 'Student',\n  },\n  {\n    id: 'mpsa',\n    displayName: 'MPSA',\n  },\n]\n\nconst PRICE_LEVEL_OPTIONS = [\n  {\n    id: 'a',\n    displayName: 'A',\n  },\n  {\n    id: 'b',\n    displayName: 'B',\n  },\n  {\n    id: 'c',\n    displayName: 'C',\n  },\n  {\n    id: 'd',\n    displayName: 'D',\n  },\n  {\n    id: 'non_specific',\n    displayName: 'NON SPECIFIC',\n  },\n]\nexport { CAGETORY_OPTIONS, PRICE_LEVEL_OPTIONS }\n","import React from 'react'\nimport {\n  CInputGroup,\n  CFormInput,\n  CRow,\n  CCol,\n  CButton,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CAlert,\n  CTableDataCell,\n  CForm,\n  CContainer,\n} from '@coreui/react'\nimport { cilWarning } from '@coreui/icons'\nimport * as XLSX from 'xlsx'\nimport * as OPTIONS from '../../utils/setting'\nconst ImportItemData = () => {\n  const defaultExcelData = { header: [], body: [] }\n  const [excelData, setExcelData] = React.useState(defaultExcelData)\n  // meta: { updatedUser: email, fileName: ..., }\n  const uploadPayload = { data: [], meta: {} }\n  const uploadRef = React.useRef()\n  const uploadData = () => {\n    for (let i = 0; i < excelData.body.length; i++) {\n      let data = excelData.body[i]\n      let [\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      ] = data\n      uploadPayload.data.push({\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      })\n    }\n    console.log(uploadPayload)\n    if (uploadPayload.data.length > 0) {\n      //call api\n    }\n  }\n  const removeFile = () => {\n    uploadRef.current.value = null\n    setExcelData(defaultExcelData)\n  }\n  const handleChange = (e) => {\n    const files = e.target.files\n    console.log(files)\n    handleFile(files[0])\n  }\n  const handleFile = (file) => {\n    if (!file) {\n      console.error('file is empty')\n      return\n    }\n    /* set up FileReader */\n    const reader = new FileReader()\n    const rABS = !!reader.readAsBinaryString\n    reader.onload = (e) => {\n      try {\n        /* Parse data */\n        const bstr = e.target.result\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0]\n        const ws = wb.Sheets[wsname]\n        console.log(rABS, wb)\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 })\n        /* Update state */\n        console.log(data)\n        /* set to state */\n        convertState(data)\n        console.log(excelData)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    if (rABS) reader.readAsBinaryString(file)\n    else reader.readAsArrayBuffer(file)\n  }\n  const convertState = (data) => {\n    if (Array.isArray(data)) {\n      const header = data[0]\n      const body = data.splice(1)\n      setExcelData({ header, body })\n    }\n  }\n  const renderCell = (item) => {\n    return (\n      <>\n        {item.map((cell, cellIndex) => {\n          return <CTableDataCell key={`${cell}_${cellIndex}`}>{cell ? cell : ''}</CTableDataCell>\n        })}\n      </>\n    )\n  }\n  // eslint-disable-next-line react/prop-types\n  const RenderFileUploadRow = ({ categoryOptions }) => {\n    // eslint-disable-next-line react/prop-types\n    const { displayName } = categoryOptions\n    return (\n      <CRow>\n        <CCol md={2}>\n          <CFormInput\n            type=\"text\"\n            id=\"inputFile\"\n            value={displayName}\n            readOnly={true}\n            disabled={true}\n          />\n        </CCol>\n        <CCol md={4}>\n          <CInputGroup className=\"mb-4\">\n            <CFormInput\n              type=\"file\"\n              accept=\".xlsx\"\n              id=\"inputFile\"\n              onChange={handleChange}\n              ref={uploadRef}\n            />\n            <CButton type=\"button\" color=\"secondary\" variant=\"outline\">\n              開始上傳\n            </CButton>\n          </CInputGroup>\n        </CCol>\n      </CRow>\n    )\n  }\n  return (\n    <div className=\"px-3\">\n      <CContainer>\n        <CAlert\n          color=\"info\"\n          dismissible\n          onClose={() => {\n            alert('👋 Well, hi there! Thanks for dismissing me.')\n          }}\n        >\n          MS檟格冊整批匯入: 需上傳全部的價格冊才能整批匯入\n        </CAlert>\n        <CForm action=\"\" method=\"post\">\n          {OPTIONS.CAGETORY_OPTIONS.map((item, index) => {\n            return <RenderFileUploadRow categoryOptions={item} key={index} />\n          })}\n          <CRow md={12} className=\"form-box\">\n            <CCol md={12}>\n              <CButton type=\"button\" color=\"secondary\" variant=\"outline\">\n                送出價格冊\n              </CButton>\n            </CCol>\n          </CRow>\n        </CForm>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default ImportItemData\n"],"names":["CAGETORY_OPTIONS","id","displayName","defaultExcelData","header","body","_React$useState","React","_React$useState2","_slicedToArray","excelData","setExcelData","uploadRef","handleChange","e","files","target","console","log","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","bstr","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","data","sheet_to_json","convertState","error","readAsArrayBuffer","Array","isArray","splice","RenderFileUploadRow","_ref","categoryOptions","_jsxs","CRow","children","_jsx","CCol","md","CFormInput","value","readOnly","disabled","CInputGroup","className","accept","onChange","ref","CButton","color","variant","CContainer","CAlert","dismissible","onClose","alert","CForm","action","method","OPTIONS","map","item","index"],"sourceRoot":""}