{"version":3,"file":"static/js/687.f4b45b92.chunk.js","mappings":"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","sources":["views/quoteToCash/ImportItemData.js"],"sourcesContent":["import React from 'react'\nimport {\n  CInputGroup,\n  CFormInput,\n  CRow,\n  CCol,\n  CButton,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n} from '@coreui/react'\nimport * as XLSX from 'xlsx'\nconst ImportItemData = () => {\n  const defaultExcelData = { header: [], body: [] }\n  const [excelData, setExcelData] = React.useState(defaultExcelData)\n  // meta: { updatedUser: email, fileName: ..., }\n  const uploadPayload = { data: [], meta: {} }\n  const uploadRef = React.useRef()\n  const uploadData = () => {\n    for (let i = 0; i < excelData.body.length; i++) {\n      let data = excelData.body[i]\n      let [\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      ] = data\n      uploadPayload.data.push({\n        partNumber,\n        itemName,\n        level,\n        purchaseUnit,\n        purchasePeriod,\n        currentNetPrice,\n        estimatedRetailPrice,\n      })\n    }\n    console.log(uploadPayload)\n    if (uploadPayload.data.length > 0) {\n      //call api\n    }\n  }\n  const removeFile = () => {\n    uploadRef.current.value = null\n    setExcelData(defaultExcelData)\n  }\n  const handleChange = (e) => {\n    const files = e.target.files\n    console.log(files)\n    handleFile(files[0])\n  }\n  const handleFile = (file) => {\n    if (!file) {\n      console.error('file is empty')\n      return\n    }\n    /* set up FileReader */\n    const reader = new FileReader()\n    const rABS = !!reader.readAsBinaryString\n    reader.onload = (e) => {\n      try {\n        /* Parse data */\n        const bstr = e.target.result\n        const wb = XLSX.read(bstr, { type: rABS ? 'binary' : 'array' })\n        /* Get first worksheet */\n        const wsname = wb.SheetNames[0]\n        const ws = wb.Sheets[wsname]\n        console.log(rABS, wb)\n        /* Convert array of arrays */\n        const data = XLSX.utils.sheet_to_json(ws, { header: 1 })\n        /* Update state */\n        console.log(data)\n        /* set to state */\n        convertState(data)\n        console.log(excelData)\n      } catch (error) {\n        console.error(error)\n      }\n    }\n    if (rABS) reader.readAsBinaryString(file)\n    else reader.readAsArrayBuffer(file)\n  }\n  const convertState = (data) => {\n    if (Array.isArray(data)) {\n      const header = data[0]\n      const body = data.splice(1)\n      setExcelData({ header, body })\n    }\n  }\n  const renderCell = (item) => {\n    return (\n      <>\n        {item.map((cell, cellIndex) => {\n          return <CTableDataCell key={`${cell}_${cellIndex}`}>{cell ? cell : ''}</CTableDataCell>\n        })}\n      </>\n    )\n  }\n  return (\n    <>\n      <CRow>\n        <CCol md={4}>\n          <CInputGroup className=\"mb-3\">\n            <CFormInput\n              type=\"file\"\n              accept=\".xlsx\"\n              id=\"inputFile\"\n              onChange={handleChange}\n              ref={uploadRef}\n            />\n            <CButton type=\"button\" color=\"secondary\" variant=\"outline\">\n              開始上傳\n            </CButton>\n            <CButton type=\"button\" color=\"secondary\" variant=\"outline\" onClick={removeFile}>\n              移除\n            </CButton>\n            <CButton type=\"button\" color=\"secondary\" variant=\"outline\" onClick={uploadData}>\n              匯入\n            </CButton>\n          </CInputGroup>\n        </CCol>\n      </CRow>\n      <div>\n        <CRow className=\"form-box px-2 overflow-scroll\">\n          <CTable hover className=\"table-bg-none\">\n            <CTableHead>\n              <CTableRow>\n                {excelData.header.map((item, index) => {\n                  return (\n                    <CTableHeaderCell scope=\"col\" key={`${item}_${index}`}>\n                      {item}\n                    </CTableHeaderCell>\n                  )\n                })}\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>\n              {excelData.body.map((item, index) => {\n                return <CTableRow key={`body_${index}`}>{renderCell(item)}</CTableRow>\n              })}\n            </CTableBody>\n          </CTable>\n        </CRow>\n      </div>\n    </>\n  )\n}\n\nexport default ImportItemData\n"],"names":["defaultExcelData","header","body","_React$useState","React","_React$useState2","_slicedToArray","excelData","setExcelData","uploadPayload","data","meta","uploadRef","handleFile","file","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","XLSX","type","wsname","SheetNames","ws","Sheets","console","log","sheet_to_json","convertState","error","readAsArrayBuffer","Array","isArray","splice","renderCell","item","_jsx","_Fragment","children","map","cell","cellIndex","CTableDataCell","concat","_jsxs","CRow","CCol","md","CInputGroup","className","CFormInput","accept","id","onChange","files","ref","CButton","color","variant","onClick","current","value","i","length","_data","partNumber","itemName","level","purchaseUnit","purchasePeriod","currentNetPrice","estimatedRetailPrice","push","CTable","hover","CTableHead","CTableRow","index","CTableHeaderCell","scope","CTableBody"],"sourceRoot":""}