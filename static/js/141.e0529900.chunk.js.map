{"version":3,"file":"static/js/141.e0529900.chunk.js","mappings":"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","sources":["../node_modules/@coreui/icons/js/free/cil-find-in-page.js","../node_modules/@coreui/icons/js/free/cil-minus.js","../node_modules/@coreui/icons/js/free/cil-pencil.js","../node_modules/@coreui/icons/js/free/cil-plus.js","../node_modules/@coreui/icons/js/free/cil-trash.js","../node_modules/short-unique-id/src/index.ts","../node_modules/short-unique-id/package.json","../node_modules/@babel/runtime/helpers/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/iterableToArray.js","../node_modules/@babel/runtime/helpers/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/toConsumableArray.js"],"sourcesContent":["export const cilFindInPage = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M334.627,16H48V496H472V153.373ZM440,464H80V48H321.373L440,166.627Z' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M239.861,152a95.861,95.861,0,1,0,53.624,175.284l68.03,68.029,22.627-22.626-67.5-67.5A95.816,95.816,0,0,0,239.861,152ZM176,247.861a63.862,63.862,0,1,1,63.861,63.861A63.933,63.933,0,0,1,176,247.861Z' class='ci-primary'/>\"]","export const cilMinus = [\"512 512\",\"<rect width='368' height='32' x='72' y='240' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/>\"]","export const cilPencil = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M29.663,482.25l.087.087a24.847,24.847,0,0,0,17.612,7.342,25.178,25.178,0,0,0,8.1-1.345l142.006-48.172,272.5-272.5A88.832,88.832,0,0,0,344.334,42.039l-272.5,272.5L23.666,456.541A24.844,24.844,0,0,0,29.663,482.25Zm337.3-417.584a56.832,56.832,0,0,1,80.371,80.373L411.5,180.873,331.127,100.5ZM99.744,331.884,308.5,123.127,388.873,203.5,180.116,412.256,58.482,453.518Z' class='ci-primary'/>\"]","export const cilPlus = [\"512 512\",\"<polygon fill='var(--ci-primary-color, currentColor)' points='440 240 272 240 272 72 240 72 240 240 72 240 72 272 240 272 240 440 272 440 272 272 440 272 440 240' class='ci-primary'/>\"]","export const cilTrash = [\"512 512\",\"<path fill='var(--ci-primary-color, currentColor)' d='M96,472a23.82,23.82,0,0,0,23.579,24H392.421A23.82,23.82,0,0,0,416,472V152H96Zm32-288H384V464H128Z' class='ci-primary'/><rect width='32' height='200' x='168' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='240' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><rect width='32' height='200' x='312' y='216' fill='var(--ci-primary-color, currentColor)' class='ci-primary'/><path fill='var(--ci-primary-color, currentColor)' d='M328,88V40c0-13.458-9.488-24-21.6-24H205.6C193.488,16,184,26.542,184,40V88H64v32H448V88ZM216,48h80V88H216Z' class='ci-primary'/>\"]","/**\n * @packageDocumentation\n **/\n\n// Copyright 2017-2022 the Short Unique ID authors. All rights reserved. Apache 2.0 license.\n\n// @ts-ignore\nimport {version} from '../package.json';\n\nexport interface ShortUniqueIdRanges {\n  [k: string]: [number, number];\n};\n\nexport interface ShortUniqueIdRangesMap {\n  [k: string]: ShortUniqueIdRanges;\n};\n\nexport type ShortUniqueIdDefaultDictionaries = 'number' | 'alpha' | 'alpha_lower' | 'alpha_upper' | 'alphanum' | 'alphanum_lower' | 'alphanum_upper' | 'hex';\n\n/**\n * ```js\n * {\n *   dictionary: ['z', 'a', 'p', 'h', 'o', 'd', ...],\n *   shuffle: false,\n *   debug: false,\n *   length: 6,\n * }\n * ```\n * <br/>\n * @see {@link DEFAULT_OPTIONS}\n */\nexport interface ShortUniqueIdOptions {\n  /** User-defined character dictionary */\n  dictionary: string[] | ShortUniqueIdDefaultDictionaries;\n\n  /** If true, sequentialUUID use the dictionary in the given order */\n  shuffle: boolean;\n\n  /** If true the instance will console.log useful info */\n  debug: boolean;\n\n  /** From 1 to infinity, the length you wish your UUID to be */\n  length: number;\n\n  /** From 0 to infinity, the current value for the sequential UUID counter */\n  counter: number;\n};\n\n/**\n * 6 was chosen as the default UUID length since for most cases\n * it will be more than aptly suitable to provide millions of UUIDs\n * with a very low probability of producing a duplicate UUID.\n *\n * For example, with a dictionary including digits from 0 to 9,\n * as well as the alphabet from a to z both in UPPER and lower case,\n * the probability of generating a duplicate in 1,000,000 rounds\n * is ~0.00000002, or about 1 in 50,000,000.\n */\nexport const DEFAULT_UUID_LENGTH: number = 6;\n\nexport const DEFAULT_OPTIONS: ShortUniqueIdOptions = {\n  dictionary: 'alphanum',\n  shuffle: true,\n  debug: false,\n  length: DEFAULT_UUID_LENGTH,\n  counter: 0,\n};\n\n/**\n * Generate random or sequential UUID of any length.\n *\n * ### Use as module\n *\n * ```js\n * // Deno (web module) Import\n * import ShortUniqueId from 'https://cdn.jsdelivr.net/npm/short-unique-id@latest/src/index.ts';\n *\n * // ES6 / TypeScript Import\n * import ShortUniqueId from 'short-unique-id';\n *\n * // or Node.js require\n * const ShortUniqueId = require('short-unique-id');\n *\n * // Instantiate\n * const uid = new ShortUniqueId();\n *\n * // Random UUID\n * console.log(uid.rnd());\n *\n * // Sequential UUID\n * console.log(uid.seq());\n * ```\n *\n * ### Use in browser\n *\n * ```html\n * <!-- Import -->\n * <script src=\"https://cdn.jsdelivr.net/npm/short-unique-id@latest/dist/short-unique-id.min.js\"></script>\n *\n * <!-- Usage -->\n * <script>\n *   // Instantiate\n *   var uid = new ShortUniqueId();\n *\n *   // Random UUID\n *   document.write(uid.rnd());\n *\n *   // Sequential UUID\n *   document.write(uid.seq());\n * </script>\n * ```\n *\n * ### Options\n *\n * Options can be passed when instantiating `uid`:\n *\n * ```js\n * const options = { ... };\n *\n * const uid = new ShortUniqueId(options);\n * ```\n *\n * For more information take a look at the [ShortUniqueIdOptions type definition](/interfaces/shortuniqueidoptions.html).\n */\nexport default class ShortUniqueId {\n  /** @hidden */\n  static default: typeof ShortUniqueId = ShortUniqueId;\n\n  public counter: number;\n  public debug: boolean;\n  public dict: string[];\n  public version: string;\n  public dictIndex: number = 0;\n  public dictRange: number[] =[];\n  public lowerBound: number = 0;\n  public upperBound: number = 0;\n  public dictLength: number = 0;\n  public uuidLength: number;\n\n  protected _digit_first_ascii: number = 48;\n  protected _digit_last_ascii: number = 58;\n  protected _alpha_lower_first_ascii: number = 97;\n  protected _alpha_lower_last_ascii: number = 123;\n  protected _hex_last_ascii: number = 103;\n  protected _alpha_upper_first_ascii: number = 65;\n  protected _alpha_upper_last_ascii: number = 91;\n\n  protected _number_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n  };\n\n  protected _alpha_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alpha_lower_dict_ranges: ShortUniqueIdRanges = {\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alpha_upper_dict_ranges: ShortUniqueIdRanges = {\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _alphanum_lower_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    lowerCase: [this._alpha_lower_first_ascii, this._alpha_lower_last_ascii],\n  };\n\n  protected _alphanum_upper_dict_ranges: ShortUniqueIdRanges = {\n    digits: [this._digit_first_ascii, this._digit_last_ascii],\n    upperCase: [this._alpha_upper_first_ascii, this._alpha_upper_last_ascii],\n  };\n\n  protected _hex_dict_ranges: ShortUniqueIdRanges = {\n    decDigits: [this._digit_first_ascii, this._digit_last_ascii],\n    alphaDigits: [this._alpha_lower_first_ascii, this._hex_last_ascii],\n  };\n\n  protected _dict_ranges: ShortUniqueIdRangesMap = {\n    _number_dict_ranges: this._number_dict_ranges,\n    _alpha_dict_ranges: this._alpha_dict_ranges,\n    _alpha_lower_dict_ranges: this._alpha_lower_dict_ranges,\n    _alpha_upper_dict_ranges: this._alpha_upper_dict_ranges,\n    _alphanum_dict_ranges: this._alphanum_dict_ranges,\n    _alphanum_lower_dict_ranges: this._alphanum_lower_dict_ranges,\n    _alphanum_upper_dict_ranges: this._alphanum_upper_dict_ranges,\n    _hex_dict_ranges: this._hex_dict_ranges,\n  };\n\n  /* tslint:disable consistent-return */\n  protected log = (...args: any[]): void => {\n    const finalArgs = [...args];\n    finalArgs[0] = `[short-unique-id] ${args[0]}`;\n    /* tslint:disable no-console */\n    if (this.debug === true) {\n      if (typeof console !== 'undefined' && console !== null) {\n        return console.log(...finalArgs);\n      }\n    }\n    /* tslint:enable no-console */\n  };\n  /* tslint:enable consistent-return */\n\n  /** Change the dictionary after initialization. */\n  setDictionary = (dictionary: string[] | ShortUniqueIdDefaultDictionaries, shuffle?: boolean): void => {\n    let finalDict: string[];\n\n    if (dictionary && Array.isArray(dictionary) && dictionary.length > 1) {\n      finalDict = dictionary as string[];\n    } else {\n      finalDict = [];\n\n      let i;\n\n      this.dictIndex = i = 0;\n\n      const rangesName = `_${dictionary as ShortUniqueIdDefaultDictionaries}_dict_ranges`;\n      const ranges = this._dict_ranges[rangesName];\n\n      Object.keys(ranges).forEach((rangeType) => {\n        const rangeTypeKey = rangeType;\n\n        this.dictRange = ranges[rangeTypeKey];\n\n        this.lowerBound = this.dictRange[0];\n        this.upperBound = this.dictRange[1];\n\n        for (\n          this.dictIndex = i = this.lowerBound;\n          this.lowerBound <= this.upperBound ? i < this.upperBound : i > this.upperBound;\n          this.dictIndex = this.lowerBound <= this.upperBound ? i += 1 : i -= 1\n        ) {\n          finalDict.push(String.fromCharCode(this.dictIndex));\n        }\n      });\n    }\n\n    if (shuffle) {\n      // Shuffle Dictionary to remove selection bias.\n      const PROBABILITY = 0.5;\n      finalDict = finalDict.sort(() => Math.random() - PROBABILITY);\n    }\n\n    this.dict = finalDict;\n\n    // Cache Dictionary Length for future usage.\n    this.dictLength = this.dict.length;\n\n    // Reset internal counter.\n    this.setCounter(0);\n  };\n\n  seq = (): string => {\n    return this.sequentialUUID();\n  };\n\n  /**\n   * Generates UUID based on internal counter that's incremented after each ID generation.\n   * @alias `const uid = new ShortUniqueId(); uid.seq();`\n   */\n  sequentialUUID = (): string => {\n    let counterDiv: number;\n    let counterRem: number;\n    let id: string = '';\n\n    counterDiv = this.counter;\n\n    do {\n      counterRem = counterDiv % this.dictLength;\n      counterDiv = Math.trunc(counterDiv / this.dictLength);\n      id += this.dict[counterRem];\n    } while (counterDiv !== 0);\n\n    this.counter += 1;\n\n    return id;\n  };\n\n  rnd = (uuidLength: number = this.uuidLength || DEFAULT_UUID_LENGTH): string => {\n    return this.randomUUID(uuidLength);\n  };\n\n  /**\n   * Generates UUID by creating each part randomly.\n   * @alias `const uid = new ShortUniqueId(); uid.rnd(uuidLength: number);`\n   */\n  randomUUID = (uuidLength: number = this.uuidLength || DEFAULT_UUID_LENGTH): string => {\n    let id: string;\n    let randomPartIdx: number;\n    let j: number;\n\n    if ((uuidLength === null || typeof uuidLength === 'undefined') || uuidLength < 1) {\n      throw new Error('Invalid UUID Length Provided');\n    }\n\n    const isPositive = uuidLength >= 0;\n\n    // Generate random ID parts from Dictionary.\n    id = '';\n    for (\n      j = 0;\n      j < uuidLength;\n      j += 1\n    ) {\n      randomPartIdx = parseInt(\n        (Math.random() * this.dictLength).toFixed(0),\n        10,\n      ) % this.dictLength;\n      id += this.dict[randomPartIdx];\n    }\n\n    // Return random generated ID.\n    return id;\n  };\n\n  fmt = (format: string, date?: Date): string => {\n    return this.formattedUUID(format, date);\n  };\n\n  /**\n   * Generates custom UUID with the provided format string.\n   * @alias `const uid = new ShortUniqueId(); uid.fmt(format: string);`\n   */\n  formattedUUID = (format: string, date?: Date): string => {\n    const fnMap = {\n      '$r': this.randomUUID,\n      '$s': this.sequentialUUID,\n      '$t': this.stamp,\n    };\n\n    const result = format.replace(\n      /\\$[rs]\\d{0,}|\\$t0|\\$t[1-9]\\d{1,}/g,\n      (m) => {\n        const fn = m.slice(0, 2);\n        const len = parseInt(m.slice(2), 10);\n\n        if (fn === '$s') {\n          return fnMap[fn]().padStart(len, '0');\n        }\n\n        if (fn === '$t' && date) {\n          return fnMap[fn](len, date);\n        }\n\n        return fnMap[fn as keyof typeof fnMap](len);\n      },\n    );\n\n    return result;\n  };\n\n  /**\n   * Calculates total number of possible UUIDs.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs\n   * - `n` is the number of unique characters in the dictionary\n   * - `l` is the UUID length\n   *\n   * Then `H` is defined as `n` to the power of `l`:\n   *\n   * <div style=\"background: white; padding: 5px; border-radius: 5px; overflow: hidden;\">\n   *  <img src=\"https://render.githubusercontent.com/render/math?math=%5CHuge%20H=n%5El\"/>\n   * </div>\n   *\n   * This function returns `H`.\n   */\n  availableUUIDs = (uuidLength: number = this.uuidLength): number => {\n    return parseFloat(\n      Math.pow([...new Set(this.dict)].length, uuidLength).toFixed(0),\n    );\n  };\n\n  /**\n   * Calculates approximate number of hashes before first collision.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - the expected number of values we have to choose before finding the\n   * first collision can be expressed as the quantity `Q(H)`\n   *\n   * Then `Q(H)` can be approximated as the square root of the product of half\n   * of pi times `H`:\n   *\n   * <div style=\"background: white; padding: 5px; border-radius: 5px; overflow: hidden;\">\n   *  <img src=\"https://render.githubusercontent.com/render/math?math=%5CHuge%20Q(H)%5Capprox%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7DH%7D\"/>\n   * </div>\n   *\n   * This function returns `Q(H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   */\n  approxMaxBeforeCollision = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    return parseFloat(\n      Math.sqrt((Math.PI / 2) * rounds).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculates probability of generating duplicate UUIDs (a collision) in a\n   * given number of UUID generation rounds.\n   *\n   * Given that:\n   *\n   * - `r` is the maximum number of times that `randomUUID()` will be called,\n   * or better said the number of _rounds_\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   *\n   * Then the probability of collision `p(r; H)` can be approximated as the result\n   * of dividing the square root of the product of half of pi times `r` by `H`:\n   *\n   * <div style=\"background: white; padding: 5px; border-radius: 5px; overflow: hidden;\">\n   *  <img src=\"https://render.githubusercontent.com/render/math?math=%5CHuge%20p(r%3B%20H)%5Capprox%5Cfrac%7B%5Csqrt%7B%5Cfrac%7B%5Cpi%7D%7B2%7Dr%7D%7D%7BH%7D\"/>\n   * </div>\n   *\n   * This function returns `p(r; H)`.\n   * \n   * (see [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution))\n   *\n   * (Useful if you are wondering _\"If I use this lib and expect to perform at most\n   * `r` rounds of UUID generations, what is the probability that I will hit a duplicate UUID?\"_.)\n   */\n  collisionProbability = (\n    rounds: number = this.availableUUIDs(this.uuidLength),\n    uuidLength: number = this.uuidLength,\n  ): number => {\n    return parseFloat(\n      (\n        this.approxMaxBeforeCollision(rounds) / this.availableUUIDs(uuidLength)\n      ).toFixed(20),\n    );\n  };\n\n  /**\n   * Calculate a \"uniqueness\" score (from 0 to 1) of UUIDs based on size of\n   * dictionary and chosen UUID length.\n   *\n   * Given that:\n   *\n   * - `H` is the total number of possible UUIDs, or in terms of this library,\n   * the result of running `availableUUIDs()`\n   * - `Q(H)` is the approximate number of hashes before first collision,\n   * or in terms of this library, the result of running `approxMaxBeforeCollision()`\n   *\n   * Then `uniqueness` can be expressed as the additive inverse of the probability of\n   * generating a \"word\" I had previously generated (a duplicate) at any given iteration\n   * up to the the total number of possible UUIDs expressed as the quotiend of `Q(H)` and `H`:\n   *\n   * <div style=\"background: white; padding: 5px; border-radius: 5px; overflow: hidden;\">\n   *  <img src=\"https://render.githubusercontent.com/render/math?math=%5CHuge%201-%5Cfrac%7BQ(H)%7D%7BH%7D\"/>\n   * </div>\n   *\n   * (Useful if you need a value to rate the \"quality\" of the combination of given dictionary\n   * and UUID length. The closer to 1, higher the uniqueness and thus better the quality.)\n   */\n  uniqueness = (rounds: number = this.availableUUIDs(this.uuidLength)): number => {\n    const score = parseFloat(\n      (1 - (\n        this.approxMaxBeforeCollision(rounds) / rounds\n      )).toFixed(20),\n    );\n    return (\n      score > 1\n    ) ? (\n      1\n    ) : (\n      (score < 0) ? 0 : score\n    );\n  };\n\n  /**\n   * Return the version of this module.\n   */\n  getVersion = (): string => {\n    return this.version;\n  };\n\n  /**\n   * Generates a UUID with a timestamp that can be extracted using `uid.parseStamp(stampString);`.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  stamp = (finalLength: number, date?: Date): string => {\n    const hexStamp = Math.floor(+(date || new Date()) / 1000).toString(16);\n\n    if (typeof finalLength === 'number' && finalLength === 0) {\n      return hexStamp;\n    }\n\n    if (typeof finalLength !== 'number' || finalLength < 10) {\n      throw new Error(\n        [\n          'Param finalLength must be a number greater than or equal to 10,',\n          'or 0 if you want the raw hexadecimal timestamp',\n        ].join('\\n')\n      );\n    }\n\n    const idLength = finalLength - 9;\n\n    const rndIdx = Math.round(Math.random() * ((idLength > 15) ? 15 : idLength));\n\n    const id = this.randomUUID(idLength);\n\n    return `${id.substring(0, rndIdx)}${hexStamp}${id.substring(rndIdx)}${rndIdx.toString(16)}`;\n  };\n\n  /**\n   * Extracts the date embeded in a UUID generated using the `uid.stamp(finalLength);` method.\n   * \n   * ```js\n   *  const uidWithTimestamp = uid.stamp(32);\n   *  console.log(uidWithTimestamp);\n   *  // GDa608f973aRCHLXQYPTbKDbjDeVsSb3\n   * \n   *  console.log(uid.parseStamp(uidWithTimestamp));\n   *  // 2021-05-03T06:24:58.000Z\n   *  ```\n   */\n  parseStamp = (suid: string, format?: string): Date => {\n    if (format && !(/t0|t[1-9]\\d{1,}/).test(format)) {\n      throw new Error('Cannot extract date from a formated UUID with no timestamp in the format');\n    }\n\n    const stamp = (\n      format\n    ) ? (\n      format.replace(\n        /\\$[rs]\\d{0,}|\\$t0|\\$t[1-9]\\d{1,}/g,\n        (m) => {\n          const fnMap = {\n            '$r': (len: number) => [...Array(len)].map(() => 'r').join(''),\n            '$s': (len: number) => [...Array(len)].map(() => 's').join(''),\n            '$t': (len: number) => [...Array(len)].map(() => 't').join(''),\n          };\n\n          const fn = m.slice(0, 2);\n          const len = parseInt(m.slice(2), 10);\n\n          return fnMap[fn as keyof typeof fnMap](len);\n        },\n      ).replace(\n        /^(.*?)(t{8,})(.*)$/g,\n        (_m, p1, p2) => {\n          return suid.substring(p1.length, p1.length + p2.length);\n        },\n      )\n    ) : (\n      suid\n    );\n\n    if (stamp.length === 8) {\n      return new Date(parseInt(stamp, 16) * 1000);\n    }\n\n    if (stamp.length < 10) {\n      throw new Error('Stamp length invalid');\n    }\n\n    const rndIdx = parseInt(stamp.substring(stamp.length - 1), 16);\n\n    return new Date(parseInt(stamp.substring(rndIdx, rndIdx + 8), 16) * 1000);\n  };\n\n  /**\n   * Set the counter to a specific value.\n   */\n  setCounter = (counter: number): void => {\n    this.counter = counter;\n  };\n\n  constructor(argOptions: Partial<ShortUniqueIdOptions> = {}) {\n    const options: ShortUniqueIdOptions = {\n      ...DEFAULT_OPTIONS,\n      ...argOptions as Partial<ShortUniqueIdOptions>,\n    };\n\n    this.counter = 0;\n    this.debug = false;\n    this.dict = [];\n    this.version = version;\n\n    const {\n      dictionary,\n      shuffle,\n      length,\n      counter,\n    } = options;\n\n    this.uuidLength = length;\n\n    this.setDictionary(dictionary, shuffle);\n    this.setCounter(counter);\n\n    this.debug = options.debug;\n    this.log(this.dict);\n    this.log(\n      `Generator instantiated with Dictionary Size ${this.dictLength} and counter set to ${this.counter}`\n    );\n\n    this.log = this.log.bind(this);\n    this.setDictionary = this.setDictionary.bind(this);\n    this.setCounter = this.setCounter.bind(this);\n    this.seq = this.seq.bind(this);\n    this.sequentialUUID = this.sequentialUUID.bind(this);\n    this.rnd = this.rnd.bind(this);\n    this.randomUUID = this.randomUUID.bind(this);\n    this.fmt = this.fmt.bind(this);\n    this.formattedUUID = this.formattedUUID.bind(this);\n    this.availableUUIDs = this.availableUUIDs.bind(this);\n    this.approxMaxBeforeCollision = this.approxMaxBeforeCollision.bind(this);\n    this.collisionProbability = this.collisionProbability.bind(this);\n    this.uniqueness = this.uniqueness.bind(this);\n    this.getVersion = this.getVersion.bind(this);\n    this.stamp = this.stamp.bind(this);\n    this.parseStamp = this.parseStamp.bind(this);\n\n    return this;\n  }\n}\n","{\n  \"name\": \"short-unique-id\",\n  \"version\": \"5.0.2\",\n  \"description\": \"Generate random or sequential UUID of any length\",\n  \"keywords\": [\n    \"short\",\n    \"random\",\n    \"uid\",\n    \"uuid\",\n    \"guid\",\n    \"node\",\n    \"unique id\",\n    \"generator\",\n    \"tiny\"\n  ],\n  \"bin\": {\n    \"short-unique-id\": \"bin/short-unique-id\",\n    \"suid\": \"bin/short-unique-id\"\n  },\n  \"main\": \"dist/short-unique-id.js\",\n  \"types\": \"dist/short-unique-id.d.ts\",\n  \"homepage\": \"https://shortunique.id\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/jeanlescure/short-unique-id\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"runkitExampleFilename\": \"./runkit.js\",\n  \"scripts\": {\n    \"test\": \"ts-node src/test.ts\",\n    \"build\": \"./scripts/build\",\n    \"docs\": \"./scripts/docs\",\n    \"release\": \"release-it\"\n  },\n  \"release-it\": {\n    \"git\": {\n      \"changelog\": \"auto-changelog --stdout -l false -u -t ./assets/changelog-compact.hbs\"\n    },\n    \"hooks\": {\n      \"after:bump\": \"./scripts/release\"\n    },\n    \"npm\": {\n      \"publish\": false\n    }\n  },\n  \"files\": [\n    \"bin\",\n    \"dist\",\n    \"runkit.js\",\n    \"package.json\"\n  ],\n  \"devDependencies\": {\n    \"@types/node\": \"^20.3.2\",\n    \"auto-changelog\": \"^2.4.0\",\n    \"esbuild\": \"^0.18.10\",\n    \"refup\": \"^1.1.0\",\n    \"release-it\": \"^15.11.0\",\n    \"ts-node\": \"^10.9.1\",\n    \"tslib\": \"^2.6.0\",\n    \"typedoc\": \"^0.24.8\",\n    \"typedoc-plugin-extras\": \"^2.3.3\",\n    \"typedoc-plugin-rename-defaults\": \"^0.6.5\",\n    \"typedoc-plugin-script-inject\": \"^1.0.0\",\n    \"typescript\": \"^5.1.6\"\n  }\n}\n","var arrayLikeToArray = require(\"./arrayLikeToArray.js\");\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\nmodule.exports = _arrayWithoutHoles, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nmodule.exports = _iterableToArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nmodule.exports = _nonIterableSpread, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var arrayWithoutHoles = require(\"./arrayWithoutHoles.js\");\nvar iterableToArray = require(\"./iterableToArray.js\");\nvar unsupportedIterableToArray = require(\"./unsupportedIterableToArray.js\");\nvar nonIterableSpread = require(\"./nonIterableSpread.js\");\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\nmodule.exports = _toConsumableArray, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;"],"names":["cilFindInPage","cilMinus","cilPencil","cilPlus","cilTrash","src_exports","__export","DEFAULT_OPTIONS","DEFAULT_UUID_LENGTH","default","ShortUniqueId","dictionary","shuffle","debug","length","counter","_ShortUniqueId","_createClass","_this","argOptions","arguments","undefined","_classCallCheck","__publicField","digits","this","_digit_first_ascii","_digit_last_ascii","lowerCase","_alpha_lower_first_ascii","_alpha_lower_last_ascii","upperCase","_alpha_upper_first_ascii","_alpha_upper_last_ascii","decDigits","alphaDigits","_hex_last_ascii","_number_dict_ranges","_alpha_dict_ranges","_alpha_lower_dict_ranges","_alpha_upper_dict_ranges","_alphanum_dict_ranges","_alphanum_lower_dict_ranges","_alphanum_upper_dict_ranges","_hex_dict_ranges","_len","args","Array","_key","_console","finalArgs","concat","console","log","apply","_toConsumableArray","finalDict","isArray","i","dictIndex","rangesName","ranges","_dict_ranges","Object","keys","forEach","rangeType","rangeTypeKey","dictRange","lowerBound","upperBound","push","String","fromCharCode","sort","Math","random","dict","dictLength","setCounter","sequentialUUID","counterDiv","counterRem","id","trunc","uuidLength","randomUUID","randomPartIdx","j","Error","parseInt","toFixed","format","date","formattedUUID","fnMap","stamp","replace","m","fn","slice","len","padStart","parseFloat","pow","Set","rounds","availableUUIDs","sqrt","PI","approxMaxBeforeCollision","score","version","finalLength","hexStamp","floor","Date","toString","join","idLength","rndIdx","round","substring","suid","test","len2","map","_m","p1","p2","options","__spreadValues","setDictionary","bind","seq","rnd","fmt","collisionProbability","uniqueness","getVersion","parseStamp","arrayLikeToArray","module","exports","arr","__esModule","iter","Symbol","iterator","from","TypeError","arrayWithoutHoles","iterableToArray","unsupportedIterableToArray","nonIterableSpread"],"sourceRoot":""}